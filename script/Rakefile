# rake script

require 'date'
require 'fileutils'
load 'jake.rb'

$version           = '02020102.beta'
$nsisPath          = 'C:/Program Files (x86)/NSIS/makensis.exe'

$version           = ENV['fullbuild_installer_version'] if ENV['fullbuild_installer_version']

$base_dir          = File.expand_path File.join(File.dirname(__FILE__), '..', '..')
$installer_dir     = File.expand_path File.join(File.dirname(__FILE__), '..')
$studio_dir        = File.join($base_dir, 'rhostudio')
$workspace_dir     = File.join($base_dir, 'workspace')
$script_dir        = File.join($installer_dir, 'script')
$package_dir       = File.join($installer_dir, 'package')
$installScript     = "rhostudio.nsi"
$installRMSScript = "rhomobilesuite.nsi"
$extWinExe         = '.exe'
$config            = Jake.config(File.open("installer.yml"))
$eclipse           = File.join($base_dir, 'eclipse', 'eclipse')
$eclipse           += 'c' if File.exists?($eclipse + 'c.exe')

#SSL cert downloaded from -  http://curl.haxx.se/ca/cacert.pem
# see details - https://gist.github.com/fnichol/867550
$certfile = File.join($script_dir, 'cacert.pem')

$ruby_env = {
    'RDOCOPT' => '--encoding=UTF-8',
    'Path' => [
        File.join($package_dir, 'redis-2.4.0'),
        File.join($package_dir, 'ruby', 'bin'),
        File.join($package_dir, 'devkit', 'bin'),
        File.join($package_dir, 'devkit', 'mingw', 'bin'),
        File.join($package_dir, 'make-3.81', 'bin')
    ].join(File::PATH_SEPARATOR),
    'SSL_CERT_FILE' => $certfile
#    'GEM CONFIGURATION' => {
#        :update_sources => true,
#        :verbose => true,
#        :backtrace => false,
#        :bulk_threshold => 1000,
#        :sources => ["https://rubygems.org"]
#    },
#    'REMOTE SOURCES' => ['https://rubygems.org']
}

if not File.exists?($nsisPath)
    ['C:/Program Files/NSIS', 'C:/Program Files (x86)/NSIS'].each do |dir|
        nsisPath = File.join(dir, 'makensis.exe')
        $nsisPath = nsisPath if File.exists?(nsisPath)
    end
end

namespace "installer" do

    def chekout_git_repo(repo_path, label)
      cd repo_path
      run 'git config core.autocrlf false'
   	  Dir.glob('*'){ |f| rm_r( f, :verbose => false ) }
      run 'git reset --hard'
      run "git checkout #{label}"
    end

    def pull_git_repo(repo_path)
      cd repo_path
      run 'git config core.autocrlf false'
      run 'git pull'
    end

    def commit_version(new_version)
      run('git add version')
      run("git commit -m '#{new_version}'")
      run("git tag -a #{new_version} -m '#{new_version}'")
      run('git push')
      run('git push --tags')
    
      new_version    
    end

    def git_apply_label(new_version)
      run("git tag -a #{new_version} -m '#{new_version}'")
      run('git push --tags')    
      new_version    
    end

    def run(command, cd = nil, env = {})
        set_list = []
        env.each_pair do |k, v|
            set_list << "set \"#{k}=#{v}\"&&"
        end

        toPrint = command
        toRun = set_list.join('') + command
        if !cd.nil?
            toPrint = "#{cd}>#{toPrint}"

            if RUBY_PLATFORM =~ /(win|w)32$/
                cd_ = cd.gsub('/', "\\")
                toRun = "cd /d \"#{cd_}\"&&#{toRun}"
            else
                toRun = "cd '#{cd}'&&#{toRun}"
            end
        end

        puts
        puts toPrint
        STDOUT.flush
        fail unless system(toRun)
    end

    def findOneItem(*globs)
        glob = File.join *globs
        items = Dir.glob glob
        fail "item '#{glob}' is not found." if items.length == 0
        if items.length > 1
            puts "Error: Several items '#{glob}' are found:"
            items.each do |item|
                puts "    '#{item}'"
            end
            fail
        end
        return items[0]
    end

    def findGem(prefix)
        return findOneItem($base_dir, 'files', prefix + '-[0-9]*.gem')
    end

    def findGemAndReport(name)
        gem = findGem(name)
        puts "#{name} gem is found: '#{gem}'"
        return gem
    end

    def rmGlob(*globs)
        Dir.glob(File.join(*globs)) { |d| rm_rf d }
    end

    def unpack_tar_gz(archive, where)
        if RUBY_PLATFORM =~ /(win|w)32$/
            Dir.mktmpdir do |dir|
                run("7za x \"#{archive}\" -bd", dir)
                Dir.glob(File.join(dir, '*')) do |f|
                    run("7za x \"#{f}\" -bd", where)
                end
            end
        else
            run("tar -xzf #{archive}", where)
        end
    end

    def moveDir(source, targetName)
      mv(source, File.join($package_dir, targetName))
    end

    def attachDmg(dmg)
        command = "hdiutil attach #{dmg}"
        puts
        puts command
        STDOUT.flush
        output = `#{command}`
        fail unless $? == 0
        disk = nil
        mount = nil
        output.lines do |line|
            match = line.match("^/dev/(\\w+)\\s*\tApple_partition_scheme\\s*\t$")
            if match
                disk = match[1]
            end
            match = line.match("^/dev/\\w+\\s*\tApple_HFS\\s*\t(/Volumes/.+)$")
            if match
                mount = match[1]
            end
        end
        fail "Can not parse output of '#{command}' conmmand" if disk.nil? or mount.nil?
        return disk, mount
    end

    def detachDmg(disk)
        run "hdiutil detach #{disk} -force"
    end

    def attachSuiteDmg
        attachDmg File.join($base_dir, 'RhoMobileSuiteInstaller.rw.dmg')
    end

    def removeRwDmg
        dmg = File.join($base_dir, 'RhoMobileSuiteInstaller.rw.dmg')
        if File.exists? dmg
            disk, mount = attachSuiteDmg
            detachDmg disk
            rmGlob dmg
        end
    end

    def makeRwDmg
        source = File.join($installer_dir, 'dmg', 'RhoMobileSuiteInstaller.dmg')
        target = File.join($base_dir, 'RhoMobileSuiteInstaller.rw.dmg')
        run "hdiutil convert '#{source}' -format UDRW -o '#{target}'"
    end

    def removeRoDmg
        rmGlob($base_dir, 'RMS_*.dmg')
    end

    def makeRoDmg
        disk, mount = attachSuiteDmg
        detachDmg disk

        source = File.join($base_dir, 'RhoMobileSuiteInstaller.rw.dmg')
        target = File.join($base_dir, "RMS_#{$version}.dmg")
        run "hdiutil convert '#{source}' -format UDBZ -o '#{target}'"
    end

    def updateBundlesInfo
        destinationJarGlob = File.join($package_dir, 'eclipse', 'plugins', 'com.rhomobile.rhostudio_*.jar')

        ids = []
        Dir.glob(destinationJarGlob).each do |plugin|
            match = plugin.match(/com.rhomobile.rhostudio_(.+).jar$/)
            fail 'Impossible' if match.nil?
            ids << match[1]
        end
        ids.sort!

        bundles = File.join($package_dir, 'eclipse', 'configuration', 'org.eclipse.equinox.simpleconfigurator', 'bundles.info')
        lines = []
        newLines = lambda {
            if not ids.nil?
                ids.each do |id|
                    lines << "com.rhomobile.rhostudio,#{id},plugins/com.rhomobile.rhostudio_#{id}.jar,4,false"
                end
                ids = nil
            end
        }
        File.open(bundles, 'r') do |f|
            while (line = f.gets)
                next if line.start_with?('com.rhomobile.rhostudio,')
                newLines.call if line > 'com.rhomobile.rhostudio,'
                lines << line
            end
            newLines.call
        end
        File.open(bundles, 'w') do |f|
            lines.each do |line|
                f.puts line
            end
        end
    end

    def removePlugin(destination)
        rmGlob(destination, 'plugins', 'com.rhomobile.rhostudio_*.jar')
    end

    def exportPlugin(destination)
        pluginExport = File.join($studio_dir, 'rhogen-wizard', 'plugin_export.xml')

        run "#{$eclipse} -nosplash -application org.eclipse.ant.core.antRunner -data #{$workspace_dir} -buildfile #{pluginExport} -Ddestination=\"#{destination}\""
    end

    def setProductVersion_
        items = $version.split('.')
        if items.length >= 4
            items = items.slice(0, 3) + [items.slice(3, items.length - 3).join('_')]
        end
        version = items.join('.')

        # do not use XML editor! next steps has specific requirements to file format
        Jake.edit_file(File.join($studio_dir, 'rhogen-wizard', 'rhostudio.product')) do |text|
            text.gsub!(/(<product [^>]*version=")[^"]*("[^>]*>)/, "\\1#{version}\\2")
        end
    end

    def exportProduct_(config, plugin, destination)
        productBuild = findOneItem($base_dir, 'eclipse', 'plugins', 'org.eclipse.pde.build_*', 'scripts', 'productBuild', 'productBuild.xml')
        builder = File.join($studio_dir, 'rhogen-wizard', 'build-setting')
        product = File.join($studio_dir, 'rhogen-wizard', 'rhostudio.product')
        icons   = File.join($studio_dir, 'rhogen-wizard', 'icons')
        pluginPath = File.join($base_dir, 'eclipse') + File::PATH_SEPARATOR + plugin

        iconsCopy = File.join(destination, 'plugins', 'RhogenWizard')
        mkdir_p iconsCopy
        cp_r(icons, iconsCopy)

        Dir.mktmpdir do |base|
            baseLocation = File.join(base, 'eclipse')
            mkdir baseLocation 
            run "#{$eclipse} -nosplash -application org.eclipse.ant.core.antRunner " +
                "-data \"#{$workspace_dir}\" " +
                "-buildfile \"#{productBuild}\" " +
                "-Dbuilder=\"#{builder}\" " +
                "-DbuildDirectory=\"#{destination}\" " +
                "-Dbase=\"#{base}\" " +
                "-DbaseLocation=\"#{baseLocation}\" " +
                "-Dproduct=\"#{product}\" " +
                '-DcollectingFolder=eclipse ' +
                "-DpluginPath=\"#{pluginPath}\" " +
                "-Dconfigs=\"#{config}\" " +
                "-DarchivesFormat=\"#{config} - folder\" " +
                '-Dp2.gathering=true ' +
                '-DbuildLabel=build ' +
                '-DbuildId=build'
        end
    end

    def editConfigIni(configIni)
        File.open(configIni, 'a') do |f|
            f.puts 'osgi.instance.area.default=@user.home/workspace'
        end
    end

    def configName(config)
        return config.gsub(', ', '.')
    end

    def removeProduct(configs, destination)
        configs.each { |c| rmGlob(destination, configName(c)) }
    end

    def exportProduct(configs, destination)
        setProductVersion_
        Dir.mktmpdir do |pluginDestination|
            exportPlugin pluginDestination
            # These two loops are nested in inefficient way.
            # It is attempt to avoid bug when second configuration are built without executable or with
            # corrupted executable.
            configs.each do |config|
                Dir.mktmpdir do |productDestination|
                    exportProduct_(config, pluginDestination, productDestination)
                    source = File.join(productDestination, 'tmp', 'eclipse')
                    editConfigIni File.join(source, 'configuration', 'config.ini')
                    target = File.join(destination, configName(config))
                    mv(source, target)
                end
            end
        end
    end

    def removePluginWin
        removePlugin File.join($package_dir, 'eclipse')
        updateBundlesInfo
    end

    def exportPluginWin
        exportPlugin File.join($package_dir, 'eclipse')
        updateBundlesInfo
    end

    def rhostudio_(mount)
      File.join(mount, 'RhoStudio')
    end

    def removePluginMac(mount)
        removePlugin rhostudio_(mount)
    end

    def exportPluginMac(mount)
        exportPlugin rhostudio_(mount)
    end

    def removeProductMac(mount)
        removeProduct(['macosx, cocoa, x86', 'macosx, cocoa, x86_64'], rhostudio_(mount))
    end

    def exportProductMac(mount)
        exportProduct(['macosx, cocoa, x86', 'macosx, cocoa, x86_64'], rhostudio_(mount))
    end

    def removeProductWin
        rmGlob($package_dir, 'rhostudio')
    end

    def exportProductWin
        target = File.join($package_dir, 'rhostudio')
        mkdir target
        exportProduct(['win32, win32, x86', 'win32, win32, x86_64'], target)
    end

    def exportFeature
        destination = File.expand_path File.join($installer_dir, 'feature')
        featureExport = File.join($studio_dir, 'rhostudio-feature', 'feature_export.xml')

        rmGlob destination
        run "#{$eclipse} -nosplash -application org.eclipse.ant.core.antRunner -data #{$workspace_dir} -buildfile #{featureExport} -Ddestination=#{destination}"
        run "#{$eclipse} -nosplash -application org.eclipse.equinox.p2.publisher.FeaturesAndBundlesPublisher -metadataRepository file:/#{destination} -artifactRepository file:/#{destination} -source #{destination} -compress -append -publishArtifacts"
    end

    def buildRhoElementsWmCfg(cfg_name, bin_dir_name, out_dir_name)
      puts 'start build RhoElements for ' + cfg_name.to_s + " WM configuration"
      chdir File.join($package_dir, "RhoElements2")

      $re_config = Jake.config(File.open("build.yml"))
      $re_config["sdk"] = nil
      $re_config["wm"] = {:sdk => cfg_name}

      output = File.new('build.yml', 'w+')
      output.puts YAML.dump($re_config)
      output.close

      `rake clean:wm`
      `rake device:wm:production`

      chdir File.join($package_dir, "RhoElements2 Shared Runtime")
      rm_rf out_dir_name
      mkdir out_dir_name

      chdir File.dirname(__FILE__)
      cp_r File.join($package_dir, "RhoElements2", "bin", "target", bin_dir_name, "RhoElements.cab"), File.join($package_dir, "RhoElements2 Shared Runtime", out_dir_name, "RhoElements.cab")

    end

    def buildRhoElementsAndroidCfg()
      puts 'start build RhoElements for Android configuration'
      chdir File.join($package_dir, "RhoElements2")

      $re_config = Jake.config(File.open("build.yml"))
      $re_config["sdk"] = nil

      output = File.new('build.yml', 'w+')
      output.puts YAML.dump($re_config)
      output.close

      #`rake clean:android`
      `rake device:android:production`

      chdir File.join($package_dir, "RhoElements2 Shared Runtime")
      rm_rf "Android"
      mkdir "Android"

      cp_r File.join($package_dir, "RhoElements2", "bin", "target", "RhoElements_signed.apk"), File.join($package_dir, "RhoElements2 Shared Runtime", "android", "RhoElements_signed.apk")
    end

    def getNsisVersion(version)
        match = version.match("^(\\d*)(.*)$")
        return version unless match
        digits = match[1]
        suffix = match[2]
        numbers = (0 .. digits.length - 1).step(2).map{|i| digits[i, 2].to_i}
        numbers.join('.') + suffix
    end

    def getPackageSize
    end 

    def removeNsisScript
       rmGlob($package_dir, '*.nsi')
    end

    def makeNsisScript(installScript)
       scriptDir = $script_dir.gsub('/',"\\")
       nsisVersion = getNsisVersion($version)

       install_script = File.read(File.join($script_dir, installScript))
       install_script.gsub!(/%NSIS_SCRIPT_PATH%/    ) { scriptDir   }
       install_script.gsub!(/%NSIS_VERSION%/        ) { nsisVersion }
       install_script.gsub!(/%RHOMOBILE_SUITE_VER%/ ) { nsisVersion }

       script_name = File.join($package_dir, installScript)
       File.open(script_name, "w") { |file| file.puts install_script }
    end

    def runNsisScript(installScript)
       makeNsisScript(installScript)
       run("\"#{$nsisPath}\" \"#{installScript}\"", $package_dir)
    end

    def renameInstaller(commonName, installerPrefix, installerSuffix)
       oldName = commonName + $extWinExe
       newName = installerPrefix + $version + installerSuffix + $extWinExe

       mv(File.join($package_dir, oldName), File.join($base_dir, newName))
    end

    def removeEclipseSettings
        rmGlob($package_dir, 'eclipse', 'configuration', '.settings')
    end

    def removeRubyCache
        rmGlob($package_dir, 'ruby', 'lib', 'ruby', 'gems', '*', 'cache')
    end

    def removeRubyAndDevkit
        ['ruby', 'devkit'].each { |n| rmGlob($package_dir, n) }
    end

    def copyRubyAndDevkit
        ['ruby', 'devkit'].each do |n|
            cp_r(File.join($base_dir, n), File.join($package_dir, n))
        end
    end

    def installDevkitIntoRuby
        ruby_dir = File.join($package_dir, 'ruby')
        devkit_dir = File.join($package_dir, 'devkit')

        File.open(File.join(devkit_dir, 'config.yml'), 'w') do |f|
            f.puts('---')
            f.puts("- #{ruby_dir}")
        end

        #run('ruby dk.rb install', devkit_dir, {:Path => File.join(ruby_dir, 'bin')})
    end

    def removeRhoElements2
        rmGlob($package_dir, 'RhoElements2 Shared Runtime')
        rmGlob($package_dir, 'RhoElements2'               )
    end

    def moveRhoElements2
      source = findOneItem($package_dir, 'ruby', 'lib', 'ruby', 'gems', '*', 'gems', 'rhoelements-*', 'RhoElements2')
      moveDir(source, 'RhoElements2')
    end

    #def removeRhoconnectPushService
        #rmGlob($package_dir, 'rhoconnect-push-service')
    #end

    #def moveRhoconnectPushService
      #source = findOneItem($package_dir, 'rhoconnect-push-service')
      #moveDir(source, 'rhoconnect-push-service')
    #end

    def removePrintingService
        rmGlob($package_dir, 'printing-service')
    end

    def movePrintingService
      #source = findOneItem($package_dir, 'ruby', 'lib', 'ruby', 'gems', '*', 'gems', 'rhoelements-*', 'libs', 'printing-service')
      #moveDir(source, 'printing-service')
    end

    def removeReadme
      rmGlob($package_dir, 'README.html')
      #rmGlob($package_dir, 'RhoMobile End User License Agreement.docx')
      rmGlob($package_dir, 'CREDITS')
    end

    def removeInstaller
      [$package_dir, $base_dir].each { |d| rmGlob(d, 'RMS_*.exe') }
    end

    def copyReadme
      readme = findOneItem($package_dir, 'ruby', 'lib', 'ruby', 'gems', '*', 'gems', 'rhodes-*', 'README.html')
      cp(readme, $package_dir)
      #eula = findOneItem($package_dir, 'ruby', 'lib', 'ruby', 'gems', '*', 'gems', 'rhoelements-*', 'RhoMobile End User License Agreement.docx')
      #cp(eula, $package_dir)
      credits = findOneItem($package_dir, 'ruby', 'lib', 'ruby', 'gems', '*', 'gems', 'rhodes-*', 'CREDITS')
      cp(credits, File.join($package_dir, 'CREDITS'))
    end


    def installGems
        def installGem(gem, pre = false)
            run("gem install #{gem}#{pre ? ' --pre' : ''}", nil, $ruby_env)
        end
        def installGem2(gembin, gem, pre = false)
            command = "\"#{gembin}\""
            command = command + " install #{gem}#{pre ? ' --pre' : ''}"
            run(command, nil, $ruby_env)
        end

        def ruby_path_fix_file(full_file_path)
            buf = ""
            real_changes = false
            File.new(full_file_path,"r").read.each_line do |line|
                orifinal_line_length = line.length
                line.gsub!("C:\\workspaces\\dev_rhoinstaller_win\\ri\\package\\ruby\\bin\\","")
                line.gsub!("C:/workspaces/dev_rhoinstaller_win/ri/package/ruby/bin/","")
                if orifinal_line_length != line.length
                    real_changes = true
                end
                buf << line
            end
            if real_changes
                File.open(full_file_path,"w") { |f| f.write(buf) }
            end
        end



        def ruby_path_fix_folder(full_folder_path)
            Dir.glob(File.join(full_folder_path,'*.bat')).each do |artefact|
               if (File.file? artefact)
                   ruby_path_fix_file(artefact)
               end
            end
        end

        rhodesgem             = findGemAndReport('rhodes'             )
        #rhoelementsgem        = findGemAndReport('rhoelements'        )
        rhoconnectgem         = findGemAndReport('rhoconnect'         )
        rhoconnectadaptersgem = findGemAndReport('rhoconnect-adapters')
        rhoconnectclientgem   = findGemAndReport('rhoconnect-client'  )
        rhotauextensionsgem   = findGemAndReport('rho-tau-extensions' )
        #rhohubgem             = findGemAndReport('rhohub')

        # 'gem update --system' command have to be invoked. But it is batch that changes itself
        # leading to harmless error.
        # There is same action as 'gem update --system':
        gem = File.join($package_dir, 'ruby', 'bin', 'gem')

        #run("ruby \"#{gem}\" update --system 1.8.25", nil, $ruby_env)



        run("gem list", nil, $ruby_env)

        #run("gem sources", nil, $ruby_env)
        #run("gem sources --add https://rubygems.org", nil, $ruby_env)
        #run("gem sources", nil, $ruby_env)

        run("gem install rdoc -v 4.2.2 --force", nil, $ruby_env)

        #run("gem install activesupport -v 4.2.7", nil, $ruby_env)
        #run("gem install bundler -v 1.13.7", nil, $ruby_env)
        #run("gem install rake -v 10.4.0", nil, $ruby_env)
        #run("gem install signet -v 0.11.0", nil, $ruby_env)
        #run("gem install faraday -v 1.0.0", nil, $ruby_env)
        run("gem install faraday -v 1.10.0 --no-rdoc --no-ri", nil, $ruby_env)
        run("gem install public_suffix -v 4.0.7 --no-rdoc --no-ri", nil, $ruby_env)
        run("gem install signet -v 0.16.1 --no-rdoc --no-ri", nil, $ruby_env)
        run("gem install google-api-client -v 0.31.0 --no-rdoc --no-ri", nil, $ruby_env)

        run("gem list", nil, $ruby_env)

        installGem 'rhomobile-debug'
        installGem 'rhodes-translator'
        installGem 'mspec'

        run("gem list", nil, $ruby_env)

        installGem "\"#{rhodesgem}\""
        installGem 'eventmachine'
        installGem "\"#{rhoconnectgem}\""
        installGem "\"#{rhoconnectadaptersgem}\""
        installGem "\"#{rhoconnectclientgem}\""
        installGem "\"#{rhotauextensionsgem}\""

        run("gem list", nil, $ruby_env)

        bin_folder = File.join($package_dir, 'ruby', 'bin')
        ruby_path_fix_folder(bin_folder)

    end

    def removeRhoconnectPushTgz
        rmGlob($package_dir, 'rhoconnect-push', 'rhoconnect-push-[0-9]*.tgz')
    end

    def copyRhoconnectPushTgz
        cp(findOneItem($base_dir, 'files', 'rhoconnect-push-[0-9]*.tgz'), File.join($package_dir, 'rhoconnect-push'))
    end

    def removeSamples(samplesDir)
      rmGlob samplesDir
    end

    def makeSamples(samplesDir)
      removeSamples(samplesDir)

      mkdir samplesDir

      repo_sas = File.join(samplesDir, 'rhodes-system-api-samples')
      cp_r(File.join($base_dir, 'rhodes-system-api-samples'), repo_sas)

      rmGlob(repo_sas, '.git')
      rmGlob(repo_sas, '.gitignore')
    end

    def removeSamplesWin
        removeSamples File.join($package_dir, 'samples')
    end

    def makeSamplesWin
        samplesDir = File.join($package_dir, 'samples')
        makeSamples samplesDir

        source = findOneItem($package_dir, 'ruby', 'lib', 'ruby', 'gems', '*', 'gems', 'rhoelements-*', 'samples')
        Dir.glob(File.join(source, '*')).each { |d| mv(d, samplesDir) }
    end

    def removeSamplesMac(mount)
        removeSamples File.join(mount, 'samples')
    end

    def makeSamplesMac(mount)
        makeSamples File.join(mount, 'samples')
    end

    def cleanDir(dir)
        rmGlob(dir, '*')
        rmGlob(dir, '.DS_Store')
    end

    def removeMiscFilesMac(mount)
        #cleanDir File.join(mount, 'RhoElements2 Shared Runtime')
        #cleanDir File.join(mount, 'RhoElements2')
        rmGlob(mount, 'ReadMe.html')
        rmGlob(mount, 'RhoMobile End User License Agreement.docx')
        rmGlob(mount, 'RhoMobile-EULA.txt')
        rmGlob(mount, 'CREDITS')
    end

    def makeMiscFilesMac(mount)
        def unpackGem(gemName, targetDir)
            gem = findGem(gemName)
            run "gem unpack '#{gem}' --target='#{targetDir}'"
            findOneItem(targetDir, "#{gemName}-[0-9]*")
        end

        def moveDirContent(source, target)
            Dir.glob(File.join(source, '*')) { |i| cp(i, target) }
            #rm_r source
        end

        Dir.mktmpdir do |dir|
            # retrieve data from rhoelements gem
            # rhoelementsDir = unpackGem('rhoelements', dir)

            # moveDirContent(
            #     File.join(rhoelementsDir, 'RhoElements2'),
            #     File.join(mount, 'RhoElements2')
            # )

            moveDirContent(
                File.join($installer_dir, 'package', 'rhoconnect-push-service'),
                File.join(mount, 'rhoconnect-push-service')
            )

            # moveDirContent(
            #     File.join(rhoelementsDir, 'libs', 'printing-service'),
            #     File.join(mount, 'printing-service')
            # )

            # mv(File.join(rhoelementsDir, 'ReadMe.html'), mount)
            # mv(File.join(rhoelementsDir, 'RhoMobile End User License Agreement.docx'), mount)
            cp(File.join($installer_dir, 'package', 'RhoMobile-EULA.txt'), mount)

            # Dir.glob(File.join(rhoelementsDir, 'samples', '*')).each do |d|
            #     mv(d, File.join(mount, 'samples'))
            # end

            # retrieve data from rhodes gem
            rhodesDir = unpackGem('rhodes', dir)

            mv(File.join(rhodesDir, 'README.html'), File.join(mount, 'ReadMe.html'))
            mv(File.join(rhodesDir, 'CREDITS'), mount)
        end

        # copy scripts
        cp(File.join($installer_dir, 'dmg', 'Install gems'), mount)
        cp(File.join($installer_dir, 'dmg', 'Install rhoconnect-push'), mount)
        cp(File.join($installer_dir, 'dmg', 'RhoStudio 32 bits'), rhostudio_(mount))
        cp(File.join($installer_dir, 'dmg', 'RhoStudio 64 bits'), rhostudio_(mount))

    end

    def removeGems(mount)
        cleanDir File.join(mount, '.gems')
    end

    def copyGems(mount)
        names = ['rhodes', 'rhoconnect', 'rhoconnect-adapters', 'rhoconnect-client', 'rho-tau-extensions']
        files = names.map { |n| findGemAndReport(n) }
        files.each { |f| cp(f, File.join(mount, '.gems')) }
    end

    def removeRps(mount)
        cleanDir File.join(mount, '.rps')
    end

    def copyRps(mount)
        cp(findOneItem($base_dir, 'files', 'rhoconnect-push-[0-9]*.tgz'), File.join(mount, '.rps'))
    end

    def removeRhoapiModules(dir)
        rmGlob(dir, 'rhoapi-modules')
    end

    def copyRhoapiModules(dir)
        archive = findOneItem($base_dir, 'files', 'rhoapi-modules-js-[0-9]*.tar.gz')
        unpack_tar_gz(archive, dir)
    end

    def removeRhoapiModulesWin
        removeRhoapiModules($package_dir)
    end

    def copyRhoapiModulesWin
        copyRhoapiModules($package_dir)
    end

    namespace "user" do
      task :gems do
        installGems
        makeSamplesWin
        removeEclipseSettings()
      end

      task :nsis => "gems" do
        puts 'start build nsis script: ' + $installScript
        runNsisScript($installScript)
      end

      task :rename => "nsis" do
        renameInstaller('RhoStudioInstaller', 'RhoStudioInstaller', '.beta')
      end

    end

    namespace "symbol" do
      task :clean do
        removeProductWin
        removeRubyAndDevkit
        removeSamplesWin
        removeReadme
        removeRhoElements2
        #removeRhoconnectPushService
        removePrintingService
        removeRhoconnectPushTgz
        #removeEclipseSettings
        removeNsisScript
        removeInstaller
        removeRhoapiModulesWin
      end

      task :gems => 'clean' do
        exportProductWin

        copyRubyAndDevkit
        installDevkitIntoRuby
        installGems
        removeRubyCache

        #makeSamplesWin

        copyReadme
        #moveRhoElements2
        #moveRhoconnectPushService
        movePrintingService
        copyRhoconnectPushTgz
        #copyRhoapiModulesWin
      end

      task :nsis => "gems" do
        puts 'release - start build nsis script: ' +  $installRMSScript
        runNsisScript($installRMSScript)
      end

      task :rename => "nsis" do
        puts 'release - start rename task'

        renameInstaller('RMS_', 'RMS_', '')
      end
    end

    namespace "rhostudio" do
      task :plugin do
        exportPluginWin
      end

      task :feature do
        exportFeature
      end
    end

    namespace 'mac' do
      namespace 'dmg' do

        task :clean do
          disk, mount = attachSuiteDmg
          removeGems mount
          removeRps mount
          removeRhoapiModules mount
          removeProductMac mount
          removeSamplesMac mount
          removeMiscFilesMac mount
        end

        task :make => 'clean' do
          disk, mount = attachSuiteDmg
          copyGems mount
          copyRps mount
          #copyRhoapiModules mount
          exportProductMac mount
          makeSamplesMac mount
          makeMiscFilesMac mount
        end

        task :open do
          disk, mount = attachSuiteDmg
          run "open '#{mount}'"
        end
      end

      task :dmg do
        removeRwDmg
        makeRwDmg
      end

      task :make => :clean do
        makeRwDmg
        Rake::Task['installer:mac:dmg:make'].invoke
        makeRoDmg
      end

      task :clean do
        removeRwDmg
        removeRoDmg
      end
    end

    ########################################################

    task :gems do
      installGems
    end

    task :symbol => "symbol:rename" do
    end

    task :tag do
      cd $installer_dir
      git_apply_label($version)
      cd $studio_dir
      git_apply_label($version) 
    end

    task :test do
      removeRubyAndDevkit
      copyRubyAndDevkit
      installDevkitIntoRuby
      installGems
    end

end
